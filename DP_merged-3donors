#load libraries----
library(Seurat)
library(ggplot2)
library(tidyverse)
library(clustree)
library(dendextend)
library(scales)
library(ggrepel)
library(MAST)
library(SeuratWrappers)
library(monocle3)
library(readxl)
library(fgsea)

#load feature bc matrices are per sample out files from cellranger multi run----
P022.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/matrix.mtx.gz",
                  features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/features.tsv.gz",
                  cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/barcodes.tsv.gz")

P042.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/matrix.mtx.gz",
                  features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/features.tsv.gz",
                  cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/barcodes.tsv.gz")

P032.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/matrix.mtx.gz",
                  features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/features.tsv.gz",
                  cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/barcodes.tsv.gz")

#create seurat objects and merge them together----
#since these feature bc matrices also contained the counts of HTO/hashtag reads as the last four rows,  
#therefore we pulled out only RNA expression read counts for the downstream analyses
P022.1 <- P022.1[1:36601,]
P042.1 <- P042.1[1:36601,]
P032.1 <- P032.1[1:36601,]

#create Seurat objects
P022.1 <- CreateSeuratObject(counts = P022.1, project = "DP_cells", min.cells = 3, min.features = 200)
P042.1 <- CreateSeuratObject(counts = P042.1, project = "DP_cells", min.cells = 3, min.features = 200)
P032.1 <- CreateSeuratObject(counts = P032.1, project = "DP_cells", min.cells = 3, min.features = 200)

#add info to metadata
# sample_id
P022.1$sample_id <- "P022.1"
P042.1$sample_id <- "P042.1"
P032.1$sample_id <- "P032.1"

# merge/remove Seurat objects
DP <- merge(P022.1, y = c(P042.1, P032.1))

# quality control and filter out the low quality cells----
DP <- PercentageFeatureSet(DP, pattern = "^MT-", col.name = "Mito_percent")
DP <- PercentageFeatureSet(DP, pattern = "^RP[SL]", col.name = "Ribo_percent")

# QC plots
VlnPlot(DP, features = c("nCount_RNA", "nFeature_RNA", "Mito_percent", "Ribo_percent"), group.by = "sample_id", pt.size = 0, ncol = 4)
FeatureScatter(DP, feature1 = "nCount_RNA", feature2 = "Ribo_percent", group.by = "sample_id")
FeatureScatter(DP, feature1 = "nFeature_RNA", feature2 = "Ribo_percent", group.by = "sample_id")
FeatureScatter(DP, feature1 = "Mito_percent", feature2 = "Ribo_percent", group.by = "sample_id")

# filtering
DP.filtered <- subset(DP, subset = nCount_RNA > 1000 & nCount_RNA < 50000 & nFeature_RNA > 500 & nFeature_RNA < 7500 & Mito_percent < 7 & Ribo_percent > 7)

#post-filter QC plots
VlnPlot(DP.filtered, features = c("nCount_RNA", "nFeature_RNA", "Mito_percent", "Ribo_percent"), group.by = "sample_id", pt.size = 0, ncol = 4)

#Normalization, Scaling, FindVariables----
DP.filtered <- NormalizeData(object =  DP.filtered, normalization.method = "LogNormalize", scale.factor = 10000)
DP.filtered <- FindVariableFeatures(object =  DP.filtered, selection.method = "vst", nfeatures = 3000)

#cell cycle annotation----
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
DP.filtered <- CellCycleScoring(DP.filtered, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)
DP.filtered$CC.Difference <- DP.filtered$S.Score - DP.filtered$G2M.Score

#dissociation associated genes----
genes.dissoc <- c("ATF3", "BTG2", "CEBPB", "CEBPD", "CXCL3", "CXCL2", "CXCL1", "DNAJA1", "DNAJB1", "DUSP1", 
                  "EGR1", "FOS", "FOSB", "HSP90AA1", "HSP90AB1", "HSPA1A", "HSPA1B", "HSPA1A", "HSPA1B", 
                  "HSPA8", "HSPB1", "HSPE1", "HSPH1", "ID3", "IER2", "JUN", "JUNB", "JUND", "MT1X", "NFKBIA", 
                  "NR4A1", "PPP1R15A", "SOCS3", "ZFP36")
genes.hypoxia <- c("LRRC42", "YKT6", "SLC25A32", "MCTS1", "MRPL13", "PSMA7", "SLC16A1", "CORO1C", "KIF4A", "CTSL2", 
                   "ANLN", "SHCBP1", "PSRC1", "CHCHD2", "TUBA1C", "TUBA1B", "MAD2L2", "ACOT7", "MRPS17", "MAP7D1", 
                   "MRPL15", "NP", "UTP11L", "C20orf20", "CDKN3", "ANKRD37", "BNIP3", "PGK1", "VEGFA", "KIF20A", "HIG2", 
                   "PGAM1", "ADM", "HK2", "SLC2A1", "CA9", "PFKP", "ENO1", "AK3L1", "P4HA1", "SEC61G", "LDHA", "NDRG1", 
                   "TUBB6", "GPI", "ALDOA", "DDITA", "TPI1", "GAPDH", "MIF", "RBM35A")
DP.filtered <- AddModuleScore(DP.filtered, features = list(genes.dissoc), ctrl = 100, name = 'dissociation_')
DP.filtered <- AddModuleScore(DP.filtered, features = list(genes.hypoxia), ctrl = 100, name = 'hypoxia_')
VlnPlot(DP.filtered, features = c("S.Score", "G2M.Score", "dissociation_1", "hypoxia_1"), group.by = "sample_id", pt.size = 0, ncol = 4)

#Seurat standard workflow----
DP.filtered <- ScaleData(DP.filtered, vars.to.regress = c("nCount_RNA", "nFeature_RNA", "CC.Difference", "Mito_percent", "dissociation_1", "hypoxia_1"))
DP.filtered <- RunPCA(DP.filtered)
ElbowPlot(DP.filtered, ndims = 50)
DP.filtered <- RunUMAP(DP.filtered, reduction = "pca", dims = 1:30)
DP.filtered <- FindNeighbors(DP.filtered, dims = 1:30)
DP.filtered <- FindClusters(DP.filtered)
view(DP.filtered@meta.data)
p1 <- DimPlot(DP.filtered, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters")
p2 <- DimPlot(DP.filtered, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters", split.by = "sample_id")
p1 | p2

# CCA-based sample integration to minimize donor-based bias in clustering----
object.list <- SplitObject(DP.filtered, split.by = 'sample_id')
for (i in 1:length(object.list)) {
  object.list[[i]] <- NormalizeData(object =  object.list[[i]], normalization.method = "LogNormalize", scale.factor = 10000)
  object.list[[i]] <- FindVariableFeatures(object =  object.list[[i]], selection.method = "vst", nfeatures = 3000)
}
integr.features <- SelectIntegrationFeatures(object.list = object.list, nfeatures = 3000, fvf.nfeatures = 3000)
integr.anchors <- FindIntegrationAnchors(object.list = object.list, anchor.features = integr.features)
remove(i, object.list, integr.features)
DP.integrated <- IntegrateData(anchorset = integr.anchors)
remove(integr.anchors, DP.filtered)

#post-integration standard workflow----
DP.integrated <- ScaleData(DP.integrated, vars.to.regress = c("nCount_RNA", "nFeature_RNA", "CC.Difference", "Mito_percent", "dissociation_1", "hypoxia_1"))
DP.integrated <- RunPCA(DP.integrated)
ElbowPlot(DP.integrated, ndims = 50)
DP.integrated <- RunUMAP(DP.integrated, reduction = "pca", dims = 1:30)
DP.integrated <- FindNeighbors(DP.integrated, dims = 1:30)
DP.integrated <- FindClusters(DP.integrated)
DP.integrated <- FindClusters(DP.integrated, resolution = seq(0.2,2,0.2))

#dimension reduction plots----
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "integrated_snn_res.0.8")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "sample_id")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "Phase")
view(DP.integrated@meta.data)

#make a tree map of clusters to get the closeness among clusters----
clustree(DP.integrated@meta.data, prefix = "integrated_snn_res.")

# add csp_assay to the seurat object----
Combined <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/matrix.mtx.gz",
                    features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/features.tsv.gz",
                    cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/barcodes.tsv.gz")

#cell surface protein (csp+hto) expression read counts were present together with gene expression read counts,
#last twelve rows corresponds to CD45RA, CD197, CD185, CD279, CD183, CD196, CD194, CD27.1, HTO1, HTO2, HTO3, HTO4
Combined_ADT <- Combined[36602:36613, colnames(DP.integrated)]
CSP <- CreateAssayObject(counts = Combined_ADT)
DP.integrated[["CSP"]] <- CSP
remove(Combined, Combined_ADT, CSP)

#normalize, scale the CSP data----
DefaultAssay(DP.integrated) <- "CSP"
DP.integrated <- NormalizeData(DP.integrated, normalization.method = "CLR", margin = 2, assay = "CSP")
DP.integrated <- ScaleData(DP.integrated, assay = "CSP")

#Significant DEGs enriched in each of clusters----
DP.integrated <- ScaleData(DP.integrated, features = rownames(DP.integrated))
all.markers_DP <- FindAllMarkers(DP.integrated, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
all.markers_DP <- all.markers_DP[all.markers_DP$p_val_adj < 0.05,]
HIST_genes <- str_subset(str_to_upper(all.markers_DP$gene), "^HIST")
var_genes <- all.markers_DP[! all.markers_DP$gene %in% HIST_genes,]

#hierarchical dendogram based on significantly enriched DEGs----
avg.exp.RNA <- AverageExpression(DP.integrated, assays = "RNA", features = unique(all.markers_DP$gene),
                                 return.seurat = FALSE, group.by = "ident", slot = "data")
avg.exp.RNA <- as.data.frame(avg.exp.RNA$RNA)
avg.exp.RNA <- as.data.frame(t(avg.exp.RNA))
avg.exp.RNA %>% select(colnames(avg.exp.RNA)) %>% dist() %>% hclust() %>% as.dendrogram() -> dend
par(mar=c(7,5,7,5))  # Increase bottom margin to have the complete label
plot(dend)

#based on hierarchical dendogram results, set the order of clusters----
DP.integrated <- RenameIdents(DP.integrated, `7` = "7")
DP.integrated <- RenameIdents(DP.integrated, `2` = "2")
DP.integrated <- RenameIdents(DP.integrated, `0` = "0")
DP.integrated <- RenameIdents(DP.integrated, `4` = "4")
DP.integrated <- RenameIdents(DP.integrated, `1` = "1")
DP.integrated <- RenameIdents(DP.integrated, `3` = "3")
DP.integrated <- RenameIdents(DP.integrated, `6` = "6")
DP.integrated <- RenameIdents(DP.integrated, `5` = "5")
DP.integrated <- RenameIdents(DP.integrated, `8` = "8")
DP.integrated <- RenameIdents(DP.integrated, `9` = "9")
DP.integrated@meta.data$seurat_clusters <- Idents(DP.integrated)

#plot heatmap (bulk) for top 200 enriched genes per cluster----
cluster.avg <- AverageExpression(DP.integrated, assays = "RNA", features = rownames(DP.integrated),
                                 return.seurat = TRUE, group.by = "ident", slot = "data")
top200_DP <- all.markers_DP %>% group_by(cluster) %>% top_n(n=200, wt = avg_log2FC)
DoHeatmap(cluster.avg, features = unique(top200_DP$gene), assay = "RNA", draw.lines = FALSE, label = TRUE, angle = 0, size = 4) + 
  scale_fill_gradientn(colors = c("grey", "black", "yellow"))

#dotplot of top 10 enriched genes per cluster----
top10_DP <- var_genes %>% group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)
DotPlot(DP.integrated, features = unique(top10_DP$gene), assay = "RNA", cols = c("gold", "red")) + RotatedAxis()
DotPlot(DP.integrated, features = unique(top10_DP$gene), assay = "RNA", cols = c("gold", "red"))$data

#barplots of seurat clusters----
df <- prop.table(table(DP.integrated@meta.data$seurat_clusters, DP.integrated@meta.data$sample_id), margin = 2)*100
barplot(df, horiz = TRUE, col = hue_pal()(10), space = 0 , xlab = "Percent", ylab = "Patient id", border = FALSE)
df1 <- prop.table(table(DP.integrated@meta.data$seurat_clusters))*100
barplot(df1, horiz = FALSE, col = hue_pal()(10), space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE)

#dotplot of selected genes in a given set of clusters----
geneset <- c("ICOS",  "CD69", "CD44", "CD38", "CD70", "HLA-DRA", "HLA-DRB1", "IL2RA", "TNFSF8", "TNFSF9", "PDCD1", "TIGIT",  "ENTPD1", "LAG3", "HAVCR2", "IFNG", "GZMA", "PRF1", "NKG7", "GZMB", 
             "GNLY", "IL10", "CD40LG", "IL21", "CCL3", "CCL4", "CCL5", "CCR2", "CCR5", "CXCR3", "CXCR5", "CXCR6", "CX3CR1", "ITGB1", "ITGB7", "ITGA4", "ITGAE", "SELPLG", "S1PR1", "S1PR4", "CCR7", 
             "SELL", "TBX21", "STAT4", "RUNX3", "PRDM1", "IKZF3", "ID2", "SH2D1A", "SLAMF1", "SLAMF6", "CD84", "MAF", "BCL6", "TCF7", "TOX2", "FOXP3", "LEF1", "TOX", "IKZF2", "KLF2", "KLF6")
DotPlot(DP.integrated, features = geneset, assay = "RNA", idents = c(5,6,3,0,2), cols = c("gold", "red")) + RotatedAxis()
dotplot.2 <- DotPlot(DP.integrated, features = geneset, assay = "RNA", idents = c(5,6,3,0,2), cols = c("gold", "red"))$data

#feature plots, and violin plots----
DefaultAssay(DP.integrated) <- "RNA"
FeaturePlot(DP.integrated, features = c("MKI67", "PDCD1", "CXCR5", "CXCR3", "CCR6", "CCR4"), pt.size = 1, cols = c("gold", "red"), order = TRUE, ncol = 3)
FeaturePlot(DP.integrated, features = c("CD27.1", "CD279", "CD185", "CD183", "CD196", "CD194"), pt.size = 1, cols = c("gold", "red"), order = TRUE, ncol = 3)
VlnPlot(DP.integrated, features =  c("CXCR3", "PDCD1", "CXCR5"), pt.size = 0.1, add.noise = FALSE, adjust = 1)
FeaturePlot(DP.integrated, features = c("CXCR5", "PDCD1"), pt.size = 1, blend = TRUE, cols = c("grey80", "green", "red"), 
            max.cutoff = 1, blend.threshold = 0.5, order = TRUE)

#cytokine expression analysis----
#calculate the percentage of the cytokines IL21, CD40LG, IL10, IFNG, GZMB, GNLY in a given cluster, numbered as 5,6,3,1,4,0,2
length(WhichCells(DP.integrated, idents = 5, expression = IL21 > 0))/length(WhichCells(DP.integrated, idents = 5))*100
IL21.per <- c(12.7, 6.05, 22.4, 17.5, 11.4, 0.21, 5.6)
CD40LG.per <- c(17.22, 17.19, 33.88, 27.5, 22.5, 0.64, 20.74)
IL10.per <- c(28.77, 7.75, 15.66, 13.4, 10.3, 0.53, 0.17)
IFNg.per <- c(55.66, 43.83, 75.4, 61.0, 48.5, 1.82, 14.84)
GZMB.per <- c(46.7, 20.34, 33.88, 29.1, 23.8, 0.21, 1.35)
GNLY.per <- c(21.46, 4.12, 11.29, 9.4, 8.7, 2.67, 1.18)
vln.col <- c("#A3A500", "#39B600", "#00BF7D", "#00BFC4", "#00B0F6", "#9590FF", "#E76BF3")
barplot(IL21.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,25))
barplot(CD40LG.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,35))
barplot(IL10.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,30))
barplot(IFNg.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,80))
barplot(GZMB.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,50))
barplot(GNLY.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,25))

#analysis of cells expressing GZMB and IL21 transcripts----
#to create FeatureScatter plot for a given cluster, cells were subset for that cluster
sub.clust <- subset(DP.integrated, subset = IFNG > 0, idents = 5)
FeatureScatter(sub.clust, "GZMB", "IL21", pt.size = 3, cols = "#A3A500")
length(WhichCells(sub.clust, expression = IL21 > 0 & GZMB == 0))/nrow(sub.clust@meta.data))*100
length(WhichCells(sub.clust, expression = IL21 == 0 & GZMB > 0))/nrow(sub.clust@meta.data))*100
length(WhichCells(sub.clust, expression = IL21 > 0 & GZMB > 0))/nrow(sub.clust@meta.data))*100

#GZMB+ and IL21+ cells annotation
IFNG_GZMB <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 == 0 & GZMB > 0)
IFNG_IL21 <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 > 0 & GZMB == 0)
IFNG_DP <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 > 0 & GZMB > 0)
DP.integrated$cytokine <- "Negative"
for (i in IFNG_GZMB){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_GZMB"}
for (i in IFNG_IL21){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_IL21"}
for (i in IFNG_DP){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_DP"}
view(DP.integrated@meta.data)

DP.integrated@meta.data$cytokine <- factor(DP.integrated@meta.data$cytokine, levels = c("Negative", "IFNG_GZMB", "IFNG_IL21", "IFNG_DP"))
DimPlot(DP.integrated, reduction = "umap", label = FALSE, pt.size = 1, repel = TRUE, group.by = "cytokine", cols = c("grey", "blue", "red", "gold"), order = TRUE) + NoLegend()
VlnPlot(DP.integrated, features =  c("PDCD1", "MKI67", "CCR2", "CCR5"), pt.size = 0.1, add.noise = FALSE, adjust = 1, idents = c("IFNG_IL21", "IFNG_GZMB"), cols = c("#00B0F6", "#E76BF3"), ncol = 2)

#volcano and heatmap plot for IL21 vs GZMB----
Idents(DP.integrated) <- DP.integrated$cytokine
genes2 <- FindMarkers(DP.integrated, ident.1 = IFNG_IL21, ident.2 = IFNG_GZMB, only.pos = FALSE, min.pct = 0.1, logfc.threshold = 0, test.use = "MAST")
genes2 <- genes2 %>% arrange(desc(avg_log2FC))
genes2$gene <- rownames(genes2)
df.1 <- genes2
df.1$diffexpressed <- "NO"
df.1$diffexpressed[df.1$avg_log2FC > 0.25 & df.1$p_val_adj < 0.05] <- "UP"
df.1$diffexpressed[df.1$avg_log2FC < -0.25 & df.1$p_val_adj < 0.05] <- "DOWN"
mycolors <- c("blue", "red", "grey")
names(mycolors) <- c("DOWN", "UP", "NO")
df.1$delabel <- NA
df.1$delabel[df.1$diffexpressed != "NO"] <- df.1$gene[df.1$diffexpressed != "NO"]

ggplot(data=df.1, aes(x=avg_log2FC, y=-log10(p_val_adj), col=diffexpressed, label=delabel)) + 
  geom_point() + theme_minimal() + geom_text_repel() +
  geom_vline(xintercept=c(-0.25, 0, 0.25), col= c("grey80", "black", "grey80")) +
  geom_hline(yintercept=-log10(0.05), col="grey80") +
  scale_color_manual(values=mycolors) + xlim(-3.5, 1) + ylim(0, 35) + NoLegend() +
  theme(panel.background = element_blank(), panel.grid = element_blank(), axis.line = element_line(), axis.ticks = element_line())

cytokine.avg <- AverageExpression(DP.integrated, assays = "RNA", features = rownames(DP.integrated),
                                  return.seurat = TRUE, group.by = "ident", slot = "data")
top_deg <- c(df.1$delabel[df.1$diffexpressed =="UP"], df.1$delabel[df.1$diffexpressed =="DOWN"])
DoHeatmap(cytokine.avg, features = unique(top_deg), assay = "RNA", draw.lines = FALSE, label = TRUE, angle = 0, size = 4) + scale_fill_gradientn(colors = c("grey", "black", "yellow"))


#Monocle3: trajectory $ pseudotime analysis----
cell.data.set <- as.cell_data_set(DP.integrated)
colData(cell.data.set)
view(cell.data.set@colData)
fData(cell.data.set)
rownames(fData(cell.data.set))
fData(cell.data.set)$gene_name <- rownames(fData(cell.data.set))
counts(cell.data.set)
cell.data.set <- cluster_cells(cell.data.set, reduction_method = "UMAP")
plot_cells(cell.data.set, color_cells_by = "partition")
#assign clusters and UMAP
cell.data.set@clusters$UMAP$clusters <- DP.integrated@active.ident
cell.data.set@int_colData$reducedDims$UMAP <- DP.integrated@reductions$umap@cell.embeddings
cell.data.set <- learn_graph(cell.data.set, use_partition = TRUE)
cell.data.set <- order_cells(cell.data.set)
#trajectory $ pseudotime plots
cell_color <- hue_pal()(10)
plot_cells(cell.data.set, color_cells_by = "cluster", label_branch_points = FALSE, label_leaves = FALSE, label_roots = FALSE, cell_stroke = 1/10,
           cell_size = 1, label_cell_groups = FALSE, label_groups_by_cluster = FALSE, trajectory_graph_segment_size = 1, 
           trajectory_graph_color = "black") + scale_color_manual(values = cell_color)
plot_cells(cell.data.set, color_cells_by = "pseudotime", label_branch_points = FALSE, label_leaves = FALSE, label_roots = FALSE, cell_stroke = 1/10,
           cell_size = 1, label_cell_groups = FALSE, label_groups_by_cluster = FALSE, 
           trajectory_graph_segment_size = 1, trajectory_graph_color = "black")


#volcano plots for cluster TH1(5) vs TCM(2)----
genes.5v2 <- FindMarkers(DP.integrated, ident.1 = 5, ident.2 = 2, only.pos = FALSE, min.pct = 0.1, logfc.threshold = 0, test.use = "MAST")
genes.5v2$gene <- rownames(genes.5v2)
df.1 <- genes.5v2
df.1$diffexpressed <- "NO"
df.1$diffexpressed[df.1$avg_log2FC > 0.25 & df.1$p_val_adj < 0.05] <- "UP"
df.1$diffexpressed[df.1$avg_log2FC < -0.25 & df.1$p_val_adj < 0.05] <- "DOWN"
mycolors <- c("blue", "red", "grey")
names(mycolors) <- c("DOWN", "UP", "NO")
df.1$delabel <- NA
df.1$delabel[df.1$diffexpressed != "NO"] <- df.1$gene[df.1$diffexpressed != "NO"]

ggplot(data=df.1, aes(x=avg_log2FC, y=-log10(p_val_adj), col=diffexpressed, label=delabel)) + 
  geom_point() + theme_minimal() + geom_text_repel() +
  geom_vline(xintercept=c(-0.25, 0, 0.25), col= c("grey80", "black", "grey80")) +
  geom_hline(yintercept=-log10(0.05), col="grey80") +
  scale_color_manual(values=mycolors) + xlim(-2.5, 4) + ylim(0, 210) + NoLegend() +
  theme(panel.background = element_blank(), panel.grid = element_blank(), axis.line = element_line(), axis.ticks = element_line())

#Gene Set Enrichment Analysis----
#conv_genes are listed in supplementary table S5D
conv_genes <- read_xlsx(path = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Tables/conv_genes.xlsx", col_names = TRUE)
conventional_geneList <- list(CTL = as.character(na.omit(conv_genes$cytotoxicity)), 
                              IFN_response = as.character(na.omit(conv_genes$Interferon)))
pathways <- conventional_geneList

genes <- FindAllMarkers(DP.integrated, only.pos = FALSE, min.pct = 0.1, logfc.threshold = 0, test.use = "MAST")
genes <- genes[genes$p_val_adj < 0.05,]

#To calculate enrichment scores for a given cluster, say cluster 5
genes1 <- genes[genes$cluster==5,]
genes1 <- genes1 %>% arrange(desc(avg_log2FC))
geneList <- genes1$avg_log2FC
names(geneList) <- genes1$gene
fgsea <- fgsea(pathways = pathways, stats = geneList, eps = 0.0, minSize = 3, maxSize = 500)
plotEnrichment(conventional_geneList[["IFN_response"]], geneList) + ggtitle("IFN_response")
fgsea2 <- data.frame(matrix(nrow = 2,ncol = 8))
fgsea2[,1] <- names(conventional_geneList)
# use alphabets to denote the cluster order, e.g., 5,6,3,1,4,0,2
colnames(fgsea2) <- c("pathway", "a","b","c","d","e","f","g")
for(i in fgsea2$pathway){
  fgsea2$a[ fgsea2$pathway==i ] <- fgsea$NES[ fgsea$pathway==i ]
}

#when you are complete running NES calculation for all clusters one-by-one, plot the tile for NES for all clusters
fgsea2$pathway <- factor(fgsea2$pathway, levels = fgsea2$pathway)
tile <- fgsea2 %>% pivot_longer(cols = c("a","b","c","d","e","f","g"), 
                                names_to = "cluster", values_to = "NES")
ggplot(tile, aes(x=pathway, y=cluster, fill=NES)) + geom_tile() + #coord_fixed() +
  scale_fill_gradient2(low = "navyblue", high = "red")

#end of the this scipt
