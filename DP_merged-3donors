

#load libraries
library(Seurat)
library(ggplot2)
library(tidyverse)

#load feature bc matrices are per sample out files from cellranger multi run
P022.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/matrix.mtx.gz",
                features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/features.tsv.gz",
                cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO2_filtered_feature_bc_matrix/barcodes.tsv.gz")

P042.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/matrix.mtx.gz",
                features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/features.tsv.gz",
                cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO3_filtered_feature_bc_matrix/barcodes.tsv.gz")

P032.1 <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/matrix.mtx.gz",
                features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/features.tsv.gz",
                cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/DemuxHTO4_filtered_feature_bc_matrix/barcodes.tsv.gz")

#since these feature bc matrices also contained the counts of HTO/hashtag reads as the last four rows,  
#therefore we pulled out only RNA expression read counts for the downstream analyses
P022.1 <- P022.1[1:36601,]
P042.1 <- P042.1[1:36601,]
P032.1 <- P032.1[1:36601,]

#create Seurat objects
P022.1 <- CreateSeuratObject(counts = P022.1, project = "DP_cells", min.cells = 3, min.features = 200)
P042.1 <- CreateSeuratObject(counts = P042.1, project = "DP_cells", min.cells = 3, min.features = 200)
P032.1 <- CreateSeuratObject(counts = P032.1, project = "DP_cells", min.cells = 3, min.features = 200)

#add info to metadata
# sample_id
P022.1$sample_id <- "P022.1"
P042.1$sample_id <- "P042.1"
P032.1$sample_id <- "P032.1"

# merge/remove Seurat objects
DP <- merge(P022.1, y = c(P042.1, P032.1))

# quality control
DP <- PercentageFeatureSet(DP, pattern = "^MT-", col.name = "Mito_percent")
DP <- PercentageFeatureSet(DP, pattern = "^RP[SL]", col.name = "Ribo_percent")

# QC plots
VlnPlot(DP, features = c("nCount_RNA", "nFeature_RNA", "Mito_percent", "Ribo_percent"), group.by = "sample_id", pt.size = 0, ncol = 4)
FeatureScatter(DP, feature1 = "nCount_RNA", feature2 = "Ribo_percent", group.by = "sample_id")
FeatureScatter(DP, feature1 = "nFeature_RNA", feature2 = "Ribo_percent", group.by = "sample_id")
FeatureScatter(DP, feature1 = "Mito_percent", feature2 = "Ribo_percent", group.by = "sample_id")

# filtering
DP.filtered <- subset(DP, subset = nCount_RNA > 1000 & nCount_RNA < 50000 & nFeature_RNA > 500 & nFeature_RNA < 7500 & Mito_percent < 7 & Ribo_percent > 7)

#post-filter QC plots
VlnPlot(DP.filtered, features = c("nCount_RNA", "nFeature_RNA", "Mito_percent", "Ribo_percent"), group.by = "sample_id", pt.size = 0, ncol = 4)

#Normalization, Scaling, FindVariables
DP.filtered <- NormalizeData(object =  DP.filtered, normalization.method = "LogNormalize", scale.factor = 10000)
DP.filtered <- FindVariableFeatures(object =  DP.filtered, selection.method = "vst", nfeatures = 3000)

#cell cycle annotation
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
DP.filtered <- CellCycleScoring(DP.filtered, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)
DP.filtered$CC.Difference <- DP.filtered$S.Score - DP.filtered$G2M.Score

#dissociation associated genes
genes.dissoc <- c("ATF3", "BTG2", "CEBPB", "CEBPD", "CXCL3", "CXCL2", "CXCL1", "DNAJA1", "DNAJB1", "DUSP1", 
                  "EGR1", "FOS", "FOSB", "HSP90AA1", "HSP90AB1", "HSPA1A", "HSPA1B", "HSPA1A", "HSPA1B", 
                  "HSPA8", "HSPB1", "HSPE1", "HSPH1", "ID3", "IER2", "JUN", "JUNB", "JUND", "MT1X", "NFKBIA", 
                  "NR4A1", "PPP1R15A", "SOCS3", "ZFP36")
genes.hypoxia <- c("LRRC42", "YKT6", "SLC25A32", "MCTS1", "MRPL13", "PSMA7", "SLC16A1", "CORO1C", "KIF4A", "CTSL2", 
                   "ANLN", "SHCBP1", "PSRC1", "CHCHD2", "TUBA1C", "TUBA1B", "MAD2L2", "ACOT7", "MRPS17", "MAP7D1", 
                   "MRPL15", "NP", "UTP11L", "C20orf20", "CDKN3", "ANKRD37", "BNIP3", "PGK1", "VEGFA", "KIF20A", "HIG2", 
                   "PGAM1", "ADM", "HK2", "SLC2A1", "CA9", "PFKP", "ENO1", "AK3L1", "P4HA1", "SEC61G", "LDHA", "NDRG1", 
                   "TUBB6", "GPI", "ALDOA", "DDITA", "TPI1", "GAPDH", "MIF", "RBM35A")
DP.filtered <- AddModuleScore(DP.filtered, features = list(genes.dissoc), ctrl = 100, name = 'dissociation_')
DP.filtered <- AddModuleScore(DP.filtered, features = list(genes.hypoxia), ctrl = 100, name = 'hypoxia_')
VlnPlot(DP.filtered, features = c("S.Score", "G2M.Score", "dissociation_1", "hypoxia_1"), group.by = "sample_id", pt.size = 0, ncol = 4)

#Seurat standard workflow
DP.filtered <- ScaleData(DP.filtered, vars.to.regress = c("nCount_RNA", "nFeature_RNA", "CC.Difference", "Mito_percent", "dissociation_1", "hypoxia_1"))
DP.filtered <- RunPCA(DP.filtered)
ElbowPlot(DP.filtered, ndims = 50)
DP.filtered <- RunUMAP(DP.filtered, reduction = "pca", dims = 1:30)
DP.filtered <- FindNeighbors(DP.filtered, dims = 1:30)
DP.filtered <- FindClusters(DP.filtered)
view(DP.filtered@meta.data)
p1 <- DimPlot(DP.filtered, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters")
p2 <- DimPlot(DP.filtered, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters", split.by = "sample_id")
p1 | p2

# CCA-based sample integration to minimize donor-based bias in clustering
object.list <- SplitObject(DP.filtered, split.by = 'sample_id')
for (i in 1:length(object.list)) {
  object.list[[i]] <- NormalizeData(object =  object.list[[i]], normalization.method = "LogNormalize", scale.factor = 10000)
  object.list[[i]] <- FindVariableFeatures(object =  object.list[[i]], selection.method = "vst", nfeatures = 3000)
}
integr.features <- SelectIntegrationFeatures(object.list = object.list, nfeatures = 3000, fvf.nfeatures = 3000)
integr.anchors <- FindIntegrationAnchors(object.list = object.list, anchor.features = integr.features)
remove(i, object.list, integr.features)
DP.integrated <- IntegrateData(anchorset = integr.anchors)
remove(integr.anchors, DP.filtered)

#post-integration standard workflow
DP.integrated <- ScaleData(DP.integrated, vars.to.regress = c("nCount_RNA", "nFeature_RNA", "CC.Difference", "Mito_percent", "dissociation_1", "hypoxia_1"))
DP.integrated <- RunPCA(DP.integrated)
ElbowPlot(DP.integrated, ndims = 50)
DP.integrated <- RunUMAP(DP.integrated, reduction = "pca", dims = 1:30)
DP.integrated <- FindNeighbors(DP.integrated, dims = 1:30)
DP.integrated <- FindClusters(DP.integrated)
DP.integrated <- FindClusters(DP.integrated, resolution = seq(0.2,2,0.2))

#dimension reduction plots
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "seurat_clusters")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "integrated_snn_res.0.8")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "sample_id")
DimPlot(DP.integrated, reduction = "umap", label = TRUE, pt.size = 1, repel = TRUE, group.by = "Phase")
view(DP.integrated@meta.data)

library(clustree)
clustree(DP.integrated@meta.data, prefix = "integrated_snn_res.")

# add csp_assay to the seurat object
Combined <- ReadMtx(mtx =  "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/matrix.mtx.gz",
                features = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/features.tsv.gz",
                cells = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_feature_bc_matrix/barcodes.tsv.gz")

#cell surface protein (csp+hto) expression read counts were present together with gene expression read counts,
#last twelve rows corresponds to CD45RA, CD197, CD185, CD279, CD183, CD196, CD194, CD27.1, HTO1, HTO2, HTO3, HTO4
Combined_ADT <- Combined[36602:36613, colnames(DP.integrated)]
CSP <- CreateAssayObject(counts = Combined_ADT)
DP.integrated[["CSP"]] <- CSP
remove(Combined, Combined_ADT, CSP)

#normalize, scale the CSP data
DefaultAssay(DP.integrated) <- "CSP"
DP.integrated <- NormalizeData(DP.integrated, normalization.method = "CLR", margin = 2, assay = "CSP")
DP.integrated <- ScaleData(DP.integrated, assay = "CSP")

#Significant DEGs enriched in each of clusters
DP.integrated <- ScaleData(DP.integrated, features = rownames(DP.integrated))
all.markers_DP <- FindAllMarkers(DP.integrated, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
all.markers_DP <- all.markers_DP[all.markers_DP$p_val_adj < 0.05,]
HIST_genes <- str_subset(str_to_upper(all.markers_DP$gene), "^HIST")
var_genes <- all.markers_DP[! all.markers_DP$gene %in% HIST_genes,]

#hierarchical dendogram based on significantly enriched DEGs
library(dendextend)
avg.exp.RNA <- AverageExpression(DP.integrated, assays = "RNA", features = unique(all.markers_DP$gene),
                                 return.seurat = FALSE, group.by = "ident", slot = "data")
avg.exp.RNA <- as.data.frame(avg.exp.RNA$RNA)
avg.exp.RNA <- as.data.frame(t(avg.exp.RNA))
avg.exp.RNA %>% select(colnames(avg.exp.RNA)) %>% dist() %>% hclust() %>% as.dendrogram() -> dend
par(mar=c(7,5,7,5))  # Increase bottom margin to have the complete label
plot(dend)

#based on hierarchical dendogram results, set the order of clusters
DP.integrated <- RenameIdents(DP.integrated, `7` = "7")
DP.integrated <- RenameIdents(DP.integrated, `2` = "2")
DP.integrated <- RenameIdents(DP.integrated, `0` = "0")
DP.integrated <- RenameIdents(DP.integrated, `4` = "4")
DP.integrated <- RenameIdents(DP.integrated, `1` = "1")
DP.integrated <- RenameIdents(DP.integrated, `3` = "3")
DP.integrated <- RenameIdents(DP.integrated, `6` = "6")
DP.integrated <- RenameIdents(DP.integrated, `5` = "5")
DP.integrated <- RenameIdents(DP.integrated, `8` = "8")
DP.integrated <- RenameIdents(DP.integrated, `9` = "9")
DP.integrated@meta.data$seurat_clusters <- Idents(DP.integrated)

#plot heatmap (bulk) for top 200 enriched genes per cluster
cluster.avg <- AverageExpression(DP.integrated, assays = "RNA", features = rownames(DP.integrated),
                                 return.seurat = TRUE, group.by = "ident", slot = "data")
top200_DP <- all.markers_DP %>% group_by(cluster) %>% top_n(n=200, wt = avg_log2FC)
DoHeatmap(cluster.avg, features = unique(top200_DP$gene), assay = "RNA", draw.lines = FALSE, label = TRUE, angle = 0, size = 4) + 
scale_fill_gradientn(colors = c("grey", "black", "yellow"))

#dotplot of top 10 enriched genes per cluster
top10_DP <- var_genes %>% group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)
DotPlot(DP.integrated, features = unique(top10_DP$gene), assay = "RNA", cols = c("gold", "red")) + RotatedAxis()
DotPlot(DP.integrated, features = unique(top10_DP$gene), assay = "RNA", cols = c("gold", "red"))$data

#feature plots, and violin plots
DefaultAssay(DP.integrated) <- "RNA"
FeaturePlot(DP.integrated, features = c("MKI67", "PDCD1", "CXCR5", "CXCR3", "CCR6", "CCR4"), pt.size = 1, cols = c("gold", "red"), order = TRUE, ncol = 3)
FeaturePlot(DP.integrated, features = c("CD27.1", "CD279", "CD185", "CD183", "CD196", "CD194"), pt.size = 1, cols = c("gold", "red"), order = TRUE, ncol = 3)
VlnPlot(DP.integrated, features =  c("CXCR3", "PDCD1", "CXCR5"), pt.size = 0.1, add.noise = FALSE, adjust = 1)
FeaturePlot(DP.integrated, features = c("CXCR5", "PDCD1"), pt.size = 1, blend = TRUE, cols = c("grey80", "green", "red"), 
            max.cutoff = 1, blend.threshold = 0.5, order = TRUE)


#calculate the percentage of the cytokines IL21, CD40LG, IL10, IFNG, GZMB, GNLY in a given cluster, numbered as 5,6,3,1,4,0,2
length(WhichCells(DP.integrated, idents = 5, expression = IL21 > 0))/length(WhichCells(DP.integrated, idents = 5))*100
IL21.per <- c(12.7, 6.05, 22.4, 17.5, 11.4, 0.21, 5.6)
CD40LG.per <- c(17.22, 17.19, 33.88, 27.5, 22.5, 0.64, 20.74)
IL10.per <- c(28.77, 7.75, 15.66, 13.4, 10.3, 0.53, 0.17)
IFNg.per <- c(55.66, 43.83, 75.4, 61.0, 48.5, 1.82, 14.84)
GZMB.per <- c(46.7, 20.34, 33.88, 29.1, 23.8, 0.21, 1.35)
GNLY.per <- c(21.46, 4.12, 11.29, 9.4, 8.7, 2.67, 1.18)
vln.col <- c("#A3A500", "#39B600", "#00BF7D", "#00BFC4", "#00B0F6", "#9590FF", "#E76BF3")
barplot(IL21.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,25))
barplot(CD40LG.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,35))
barplot(IL10.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,30))
barplot(IFNg.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,80))
barplot(GZMB.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,50))
barplot(GNLY.per, horiz = FALSE, col = vln.col, space = 0 , xlab = "Percent", ylab = "Cluster", border = FALSE, ylim = c(0,25))

#to create FeatureScatter plot for a given cluster, cells were subset for that cluster
sub.clust <- subset(DP.integrated, subset = IFNG > 0, idents = 5)
FeatureScatter(sub.clust, "GZMB", "IL21", pt.size = 3, cols = "#A3A500")
length(WhichCells(sub.clust, expression = IL21 > 0 & GZMB == 0))/nrow(sub.clust@meta.data))*100
length(WhichCells(sub.clust, expression = IL21 == 0 & GZMB > 0))/nrow(sub.clust@meta.data))*100
length(WhichCells(sub.clust, expression = IL21 > 0 & GZMB > 0))/nrow(sub.clust@meta.data))*100

IFNG_GZMB <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 == 0 & GZMB > 0)
IFNG_IL21 <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 > 0 & GZMB == 0)
IFNG_DP <- WhichCells(DP.integrated, expression = IFNG > 0 & IL21 > 0 & GZMB > 0)
DP.integrated$cytokine <- "negative"
for (i in IFNG_GZMB){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_GZMB"}
for (i in IFNG_IL21){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_IL21"}
for (i in IFNG_DP){DP.integrated$cytokine[colnames(DP.integrated) == i] <- "IFNG_DP"}

#Monocle3: trajectory $ pseudotype analysis
library(SeuratWrappers)
library(monocle3)

#cell dataset
cell.data.set <- as.cell_data_set(DP.integrated)

#cell metadata
colData(cell.data.set)
view(cell.data.set@colData)

#gene metadata
fData(cell.data.set)
rownames(fData(cell.data.set))
fData(cell.data.set)$gene_name <- rownames(fData(cell.data.set))

#counts
counts(cell.data.set)
cell.data.set <- cluster_cells(cell.data.set, reduction_method = "UMAP")
plot_cells(cell.data.set, color_cells_by = "partition")

#assign clusters and UMAP
cell.data.set@clusters$UMAP$clusters <- DP.integrated@active.ident
cell.data.set@int_colData$reducedDims$UMAP <- DP.integrated@reductions$umap@cell.embeddings
cell.data.set <- learn_graph(cell.data.set, use_partition = TRUE)
cell.data.set <- order_cells(cell.data.set)

library(scales)
cell_color <- hue_pal()(10)
plot_cells(cell.data.set, color_cells_by = "cluster", label_branch_points = FALSE, label_leaves = FALSE, label_roots = FALSE, cell_stroke = 1/10,
           cell_size = 1, label_cell_groups = FALSE, label_groups_by_cluster = FALSE, trajectory_graph_segment_size = 1, 
           trajectory_graph_color = "black") + scale_color_manual(values = cell_color)
plot_cells(cell.data.set, color_cells_by = "pseudotime", label_branch_points = FALSE, label_leaves = FALSE, label_roots = FALSE, cell_stroke = 1/10,
           cell_size = 1, label_cell_groups = FALSE, label_groups_by_cluster = FALSE, 
           trajectory_graph_segment_size = 1, trajectory_graph_color = "black")








