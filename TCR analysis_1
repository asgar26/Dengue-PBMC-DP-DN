#load the libraries----
library(Seurat)
library(scRepertoire)
library(ggplot2)
library(UpSetR)
library(scales)
library(circlize)

#load data----
DP.contig <- read.csv(file = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/Combined_filtered_contig_annotations.csv")
DP.integrated <- readRDS(file = "C:/Users/VIL/Desktop/Asgar/10x single cell/Dengue DP cells/outputs/Robjects/DP.integrated.rds")

#combine TCR data with seurat object using scRepertoire----
combineTCR_DP <- combineTCR(df = DP.contig, samples = "DP", ID = NULL)
combineTCR_DP <- stripBarcode(combineTCR_DP$DP, column = "barcode", connector = "_", num_connects = 2)
remove(DP.contig)
# can filter out the TCR NA barcodes
DP.integrated <- combineExpression(combineTCR_DP, DP.integrated, 
                                   cloneCall="strict", 
                                   proportion = FALSE, filterNA = TRUE, 
                                   cloneTypes=c(Single=1, Small=5, Medium=20, Large=100, Hyperexpanded=1000))
# or can keep the TCR NA barcodes
DP.integrated <- combineExpression(combineTCR_DP, DP.integrated, 
                                   cloneCall="strict", 
                                   proportion = FALSE, filterNA = FALSE, 
                                   cloneTypes=c(Single=1, Small=5, Medium=20, Large=100, Hyperexpanded=1000))

#plot UMAP showing the expansion and frequency----
slot(DP.integrated, "meta.data")$cloneType <- factor(slot(DP.integrated, "meta.data")$cloneType, 
                                                     levels = c("Single (0 < X <= 1)", 
                                                                "Small (1 < X <= 5)", 
                                                                "Medium (5 < X <= 20)", 
                                                                "Large (20 < X <= 100)",
                                                                "Hyperexpanded (100 < X <= 1000)"))

DimPlot(DP.integrated, group.by = "cloneType", pt.size = 1, cols = c("gold", "red", "red2", "red3", "red4")) + NoLegend()
df <- table(DP.integrated@meta.data$cloneType, DP.integrated@meta.data$seurat_clusters)
barplot(df, horiz = FALSE, col = c("gold", "red", "red2", "red3", "red4"), space = 0 , xlab = "Clusters", ylab = "Number of clones", border = FALSE, legend.text = FALSE)

#calculate and plot clonality per cluster----
tcr_meta.data <- DP.integrated@meta.data
tcr_meta.data_expand <- tcr_meta.data[tcr_meta.data$cloneType != "Single (0 < X <= 1)",]
clusters <- c(9,8,5,6,3,1,4,0,2,7)
#calculate average clonality per cluster, average number of clonal cells per clonotype
df_new <- data.frame(matrix(nrow = 0, ncol = 3))
colnames(df_new) <- c("clusters", "cells", "clonotypes")
for (i in clusters){
  cells <- length(tcr_meta.data[tcr_meta.data$seurat_clusters==i,]$barcode)
  clonotypes <- length(table(tcr_meta.data[tcr_meta.data$seurat_clusters==i,]$CTstrict))
  print(c(i, cells, clonotypes))
  df_new[nrow(df_new)+1,] <- c(i, cells, clonotypes)
}
df_new$cells <- as.numeric(df_new$cells)
df_new$clonotypes <- as.numeric(df_new$clonotypes)
View(df_new)

clonotypicity <- df_new[,2]/df_new[,3]
names(clonotypicity) <- df_new[,1]
barplot(clonotypicity, beside = TRUE, col = "gold", border = "red", ylim = c(1, 3), ylab = "cells/clone", xlab = "Clusters", xpd = FALSE)

#create circos plot to show the overlaping clonotypes from a given cluster to rest of the clusters----
# we used only those clonotypes which are expanding (clonal size > 1)
clusters <- c(9,8,5,6,3,1,4,0,2,7)
df_new <- data.frame(matrix(nrow = 0,ncol = 3))
colnames(df_new) <- c("clusters","start","end")
for (i in clusters){
  tot <- length(table(tcr_meta.data_expand[tcr_meta.data_expand$seurat_clusters==i,]$CTstrict))
  print(tot)
  df_new[nrow(df_new)+1,] <- c(i, '0', tot)
}
df_new$start <- as.numeric(df_new$start)
df_new$end <- as.numeric(df_new$end)
cell_color <- hue_pal()(10)
df_new$col <- cell_color
View(df_new)

tcr_data_filter <- tcr_meta.data_expand[,c("seurat_clusters","CTgene", "CTaa", "CTnt", "CTstrict")]
tcr_data_filter <- na.omit(tcr_data_filter)
tcr_data_filter_1 <- data.frame(matrix(nrow = 0,ncol = 3))
for(i in clusters){
  filtered_data = tcr_data_filter[tcr_data_filter$seurat_clusters==i,]
  print(i)
  data = as.data.frame(table(filtered_data$CTstrict))
  data$seurat_clusters <- i
  #print(data)
  tcr_data_filter_1 <- rbind(tcr_data_filter_1,data)
}
tcr_data_filter_1 <- distinct(tcr_data_filter_1)
colnames(tcr_data_filter_1) <- c("clone_id", "clone_id_size","cluster")
tcr_data_filter_1 <- tcr_data_filter_1 %>% group_by(cluster) %>% arrange(desc(clone_id_size), .by_group = TRUE)

df_bed <- data.frame(matrix(nrow = 0,ncol = 5))
colnames(df_bed) <- c("cluster","start","end","value","clone_id")
tcr_data_density <- tcr_data_filter_1
for(i in unique(tcr_data_density$cluster)){
  filtered_data = tcr_data_density[tcr_data_density$cluster==i,]
  for(i in 1:nrow(filtered_data)){
    clus = filtered_data[[i,3]]
    start_val = i
    end_val = i
    dens = filtered_data[[i,2]]
    id = as.character(filtered_data[[i,1]])
    df_bed[nrow(df_bed)+1,] <- c(clus,start_val,end_val,dens,id)
  }
}
df_bed$start <- as.numeric(df_bed$start)
df_bed$end <- as.numeric(df_bed$end)
df_bed$value <- as.numeric(df_bed$value)
df_bed$value <- log10(df_bed$value)
track.col <- as.data.frame(cell_color, row.names = as.character(clusters))
track.col <- rownames_to_column(track.col, var = "cluster")
for(i in unique(df_bed$cluster)){
  df_bed$col[df_bed$cluster==i] <- track.col$cell_color[track.col$cluster==i]
}

df_link <- df_bed
df_link <- df_link[,c("cluster","start","clone_id")]
View(df_link)

df_link_frame <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(df_link_frame) <- c("cluster1","loc1","cluster2","loc2")
f_cluster = 5
link.col <- track.col$cell_color[track.col$cluster==f_cluster]
l_f_cluster <- df_link[df_link$cluster == f_cluster,]
l_o_cluster <- df_link[df_link$cluster != f_cluster,]
for(i in 1:nrow(l_f_cluster)){
  match_clone_id1 <- l_f_cluster[[i,3]]
  cluster1 <- l_f_cluster[[i,1]]
  loc_1 <- l_f_cluster[[i,2]]
  for(j in 1:nrow(l_o_cluster)){
    match_clone_id2 <- l_o_cluster[[j,3]]
    if (match_clone_id1 == match_clone_id2){
      cluster2 <- l_o_cluster[[j,1]]
      loc_2 <- l_o_cluster[[j,2]]
      df_link_frame[nrow(df_link_frame)+1,] <- c(cluster1,loc_1,cluster2,loc_2)
    }
  }
}
df1_link <- df_link_frame[,c("cluster1","loc1")]
df1_link$loc1 <- as.numeric(df1_link$loc1)
df2_link <- df_link_frame[,c("cluster2","loc2")]
df2_link$loc2 <- as.numeric(df2_link$loc2)

track.height = 0.1
par(mar = c(0, 0, 0, 0))
circos.genomicInitialize(df_new, plotType = "labels")
circos.genomicTrack(df_bed, numeric.column = 4, bg.border = NA,
                    panel.fun = function(region, value, ...){
                      circos.genomicLines(region, value, type = "h", col = value$col)
                    })
circos.genomicTrackPlotRegion(df_new, ylim = c(0, 2), bg.border = NA, track.height = track.height,
                              cell.padding = c(0, 0, 0, 0),
                              panel.fun = function(region, value, ...){
                                circos.genomicRect(region, value, ybottom = 0, ytop = 1, col = value$col, border = NA, ...)
                                xlim = get.cell.meta.data("xlim")
                                circos.rect(xlim[1], 0, xlim[2], 1, border = NA)
                              })
circos.genomicLink(df1_link, df2_link, col = link.col)

#generate clone.info table showing all details of clonotypes and overlap among clusters----
clonotype.table <- as.data.frame.array(table(tcr_data_filter$seurat_clusters, tcr_data_filter$CTstrict))
clonotype.table <- as.data.frame(t(clonotype.table))
clonotype.table$clone_size <- rowSums(clonotype.table)
clone.info <- data.frame(matrix(nrow = nrow(clonotype.table), ncol = 4))
colnames(clone.info) <- c("clone_id", "CTgene", "CTaa", "CTnt")
clone.info$clone_id <- paste("clonotype", rownames(clone.info), sep = " ")
rownames(clone.info) <- rownames(clonotype.table)
for(i in rownames(clone.info)){
  clone.info[rownames(clone.info)==i,]$CTgene <- unique(tcr_meta.data_expand[tcr_meta.data_expand$CTstrict==i,]$CTgene)
  clone.info[rownames(clone.info)==i,]$CTaa <- unique(tcr_meta.data_expand[tcr_meta.data_expand$CTstrict==i,]$CTaa)
  clone.info[rownames(clone.info)==i,]$CTnt <- unique(tcr_meta.data_expand[tcr_meta.data_expand$CTstrict==i,]$CTnt)
}
clone.info <- separate(clone.info, col = 'CTgene', into = c('TCRA_gene', 'TCRB_gene'), sep = '_')
clone.info <- separate(clone.info, col = 'CTaa', into = c('TCRA_aa', 'TCRB_aa'), sep = '_')
clone.info <- separate(clone.info, col = 'CTnt', into = c('TCRA_nt', 'TCRB_nt'), sep = '_')
clone.info <- cbind(clone.info, clonotype.table)
clone.info$prop.clone_size <- clone.info$clone_size / sum(clone.info$clone_size)
clone.info$cloneType <- NA
for(i in rownames(clone.info)){
  clone.info[rownames(clone.info)==i,]$cloneType <- as.character(unique(tcr_meta.data_expand[tcr_meta.data_expand$CTstrict==i,]$cloneType))
}

#plot top20 ranked clonotypes----
top20_clonotypes <- clone.info %>% top_n(n=20, wt = clone_size) %>% arrange(desc(clone_size))
par(mar=c(8, 4, 4, 2) + 0.1)
barplot(top20_clonotypes$clone_size[1:20], beside = TRUE, col = "gold", border = "red",  ylim = c(0, 1200), ylab = "Number of clones", 
        names.arg = top20_clonotypes$clone_id[1:20], las = 2)

#UpSetR plot to plot combinatorial overlap among clusters----
clone.overlap <- clone.info[,c("clone_id", clusters)]
clone.overlap[,2:11] <- ifelse(clone.overlap[,2:11] !=0, yes = 1, no =0)
upset(clone.overlap, sets = colnames(clone.overlap[2:11]), mb.ratio = c(0.55, 0.45), order.by = c("freq", "degree"), show.numbers = "no", keep.order = TRUE,
      main.bar.color = "royalblue3", sets.bar.color = "red3", matrix.color = "royalblue2", nintersects = NA, query.legend="top")

#generate the tile plot for the overlap clonotypes among clusters----
overlap <- data.frame(matrix(ncol = 0, nrow = 10))
for (i in 2:11) {
  overlapcount <- clone.overlap
  overlapcount <- overlapcount[overlapcount[,i]==1,]
  overlap[ncol(overlap)+1] <- as.data.frame(colSums(overlapcount[2:11]))
}
colnames(overlap) <- colnames(clone.overlap[2:11])
rownames(overlap) <- colnames(clone.overlap[2:11])

#we included only selected clusters, one can calculate percentage with respect to total expanded clonotypes, e.g., 231
overlap2 <- round((overlap[,c(3,4,5,8,9)]/231)*100, 1)
overlap2 <- as.data.frame(t(overlap2))
#or, other way is to calculate ovelap percentage with respect to total expanded clonotypes per cluster
overlap2 <- overlap[,c(3,4,5,8,9)]
for (i in 1:ncol(overlap2)){overlap2[,i] <- round((overlap2[,i]/max(overlap2[,i]))*100, 1)}
overlap2 <- as.data.frame(t(overlap2))
#use alphabets to keep the order of clusters
colnames(overlap2) <- letters[1:ncol(overlap2)]
overlap2 <- rownames_to_column(overlap2, "cluster")
overlap2$cluster <- factor(overlap2$cluster, levels = overlap2$cluster)
overlap2 <- overlap2 %>% pivot_longer(cols = colnames(overlap2)[2:ncol(overlap2)], names_to = "to", values_to = "percent")
ggplot(overlap2, aes(x=cluster, y=to, fill=percent)) + geom_tile() +
  scale_fill_gradient2(low = "white", high = "red")

#for GZMB vs IL21 clonal overlap analysis----
tcr_cytokine <- tcr_meta.data[c(IFNG_IL21, IFNG_GZMB),]
clusters <- c("IFNG_IL21", "IFNG_GZMB")
df_new <- data.frame(matrix(nrow = 0,ncol = 3))
colnames(df_new) <- c("chr","start","end")
for (i in clusters){
  tot <- length(table(tcr_cytokine[tcr_cytokine$cytokine==i,]$CTstrict))
  print(tot)
  df_new[nrow(df_new)+1,] <- c(i, '0', tot)
}
df_new$start <- as.numeric(df_new$start)
df_new$end <- as.numeric(df_new$end)
cell_color <- c("#E76BF3", "#00B0F6")
df_new$col <- cell_color
View(df_new)
tcr_data_filter <- tcr_cytokine[,c("cytokine","CTgene", "CTaa", "CTnt", "CTstrict")]
tcr_data_filter <- na.omit(tcr_data_filter)
tcr_data_filter_1 <- data.frame(matrix(nrow = 0,ncol = 3))
for(i in clusters){
  filtered_data = tcr_data_filter[tcr_data_filter$cytokine==i,]
  print(i)
  data = as.data.frame(table(filtered_data$CTstrict))
  data$seurat_clusters <- i
  #print(data)
  tcr_data_filter_1 <- rbind(tcr_data_filter_1,data)
}
tcr_data_filter_1 <- distinct(tcr_data_filter_1)
colnames(tcr_data_filter_1) <- c("clone_id", "clone_id_size","cluster")
tcr_data_filter_1 <- tcr_data_filter_1 %>% group_by(cluster) %>% arrange(desc(clone_id_size), .by_group = TRUE)

df_bed <- data.frame(matrix(nrow = 0,ncol = 5))
colnames(df_bed) <- c("cluster","start","end","value","clone_id")
tcr_data_density <- tcr_data_filter_1
for(i in unique(tcr_data_density$cluster)){
  filtered_data = tcr_data_density[tcr_data_density$cluster==i,]
  for(i in 1:nrow(filtered_data)){
    clus = filtered_data[[i,3]]
    start_val = i
    end_val = i
    dens = filtered_data[[i,2]]
    id = as.character(filtered_data[[i,1]])
    df_bed[nrow(df_bed)+1,] <- c(clus,start_val,end_val,dens,id)
  }
}
df_bed$start <- as.numeric(df_bed$start)
df_bed$end <- as.numeric(df_bed$end)
df_bed$value <- as.numeric(df_bed$value)
df_bed$value <- log10(df_bed$value)
track.col <- as.data.frame(cell_color, row.names = as.character(clusters))
track.col <- rownames_to_column(track.col, var = "cluster")
for(i in unique(df_bed$cluster)){
  df_bed$col[df_bed$cluster==i] <- track.col$cell_color[track.col$cluster==i]
}

df_link <- df_bed
df_link <- df_link[,c("cluster","start","clone_id")]
View(df_link)

df_link_frame <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(df_link_frame) <- c("cluster1","loc1","cluster2","loc2")
f_cluster = "IFNG_IL21"
link.col <- track.col$cell_color[track.col$cluster==f_cluster]
l_f_cluster <- df_link[df_link$cluster == f_cluster,]
l_o_cluster <- df_link[df_link$cluster != f_cluster,]
for(i in 1:nrow(l_f_cluster)){
  match_clone_id1 <- l_f_cluster[[i,3]]
  cluster1 <- l_f_cluster[[i,1]]
  loc_1 <- l_f_cluster[[i,2]]
  for(j in 1:nrow(l_o_cluster)){
    match_clone_id2 <- l_o_cluster[[j,3]]
    if (match_clone_id1 == match_clone_id2){
      cluster2 <- l_o_cluster[[j,1]]
      loc_2 <- l_o_cluster[[j,2]]
      df_link_frame[nrow(df_link_frame)+1,] <- c(cluster1,loc_1,cluster2,loc_2)
    }
  }
}
df1_link <- df_link_frame[,c("cluster1","loc1")]
df1_link$loc1 <- as.numeric(df1_link$loc1)
df2_link <- df_link_frame[,c("cluster2","loc2")]
df2_link$loc2 <- as.numeric(df2_link$loc2)

track.height = 0.1
par(mar = c(0, 0, 0, 0))
circos.genomicInitialize(df_new, plotType = "labels")
circos.genomicTrack(df_bed, numeric.column = 4, bg.border = NA,
                    panel.fun = function(region, value, ...){
                      circos.genomicLines(region, value, type = "h", col = value$col)
                    })
circos.genomicTrackPlotRegion(df_new, ylim = c(0, 2), bg.border = NA, track.height = track.height,
                              cell.padding = c(0, 0, 0, 0),
                              panel.fun = function(region, value, ...){
                                circos.genomicRect(region, value, ybottom = 0, ytop = 1, col = value$col, border = NA, ...)
                                xlim = get.cell.meta.data("xlim")
                                circos.rect(xlim[1], 0, xlim[2], 1, border = NA)
                              })
circos.genomicLink(df1_link, df2_link, col = link.col)

#end of the this scipt
